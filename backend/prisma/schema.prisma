generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int          @id @unique @default(autoincrement())
  friendly_id    String       @unique
  password_hash  String
  session_cookie String?
  session_expiry DateTime?    @db.Timestamptz
  is_admin       Boolean      @default(false)
  created_at     DateTime     @default(now()) @db.Timestamptz
  updated_at     DateTime     @updatedAt @db.Timestamptz
  Participant    Participant?

  @@map("users")
}

model Participant {
  user                  User             @relation(fields: [user_id], references: [id])
  user_id               Int              @id @unique
  need_password_reset   Boolean          @default(true)
  completed_pre_survey  Boolean          @default(false)
  completed_post_survey Boolean          @default(false)
  in_control_group      Boolean?
  coin_balance          Int              @default(200)
  cash_balance          Int              @default(0)
  created_at            DateTime         @default(now()) @db.Timestamptz
  updated_at            DateTime         @updatedAt @db.Timestamptz
  bets                  Bet[]
  SurveyResponse        SurveyResponse[]

  @@map("participants")
}

model Survey {
  id             Int              @id @default(autoincrement())
  name           String
  link           String
  open_on        DateTime         @db.Timestamptz
  close_on       DateTime         @db.Timestamptz
  is_closed      Boolean?
  qualtrics_id String?  @unique
  created_at     DateTime         @default(now()) @db.Timestamptz
  updated_at     DateTime         @updatedAt @db.Timestamptz
  SurveyResponse SurveyResponse[]

  @@map("surveys")
}

model SurveyResponse {
  id             Int         @id @default(autoincrement())
  survey_id      Int
  participant_id Int
  created_at     DateTime    @default(now()) @db.Timestamptz
  updated_at     DateTime    @updatedAt @db.Timestamptz
  survey         Survey      @relation(fields: [survey_id], references: [id])
  participant    Participant @relation(fields: [participant_id], references: [user_id])

  @@map("survey_responses")
}

model Market {
  id         Int      @id @default(autoincrement())
  name       String
  question   String
  open_on    DateTime @db.Timestamptz
  close_on   DateTime @db.Timestamptz
  is_open    Boolean?
  is_control Boolean
  resolution Boolean?
  yes_no_flag   Boolean?
  created_at DateTime @default(now()) @db.Timestamptz
  updated_at DateTime @updatedAt @db.Timestamptz
  bets       Bet[]

  @@map("markets")
}

model Bet {
  id             Int         @id @default(autoincrement())
  user_id        Int
  market_id      Int
  bet_outcome    Boolean
  bet_amount     Int
  bet_change_count   Int
  bet_resolution Boolean?
  participant    Participant @relation(fields: [user_id], references: [user_id])
  market         Market      @relation(fields: [market_id], references: [id])
  created_at     DateTime    @default(now()) @db.Timestamptz
  updated_at     DateTime    @updatedAt @db.Timestamptz

  @@map("bets")
}
